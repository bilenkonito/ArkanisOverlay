@using System.Diagnostics.CodeAnalysis
@using System.Text
@using Arkanis.Overlay.Domain.Abstractions.Game
@using Arkanis.Overlay.External.MedRunner.API.Abstractions
@using Arkanis.Overlay.External.MedRunner.API.Endpoints.Emergency.Request
@using Arkanis.Overlay.External.MedRunner.Models
@using Arkanis.Overlay.Infrastructure.Helpers
@inherits MedRunnerComponentBase
@inject IMedRunnerClientConfig MedRunnerClientConfig

<MudGrid Class="pa-5">
    <MudItem xs="12" md="8">
        <GameEntitySelectBox
            Label="Closest location"
            EntityCategory="@GameEntityCategory.Location"
            @bind-Value="@_closestLocationEntity"
            Accept="@(location => location is not GameStarSystem)"/>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudSelect @bind-Value="@_threatLevel"
                   Label="Threat level">
            @foreach (var threatLevel in Enum.GetValues<ThreatLevel>())
            {
                <MudSelectItem T="ThreatLevel?" Value="@threatLevel">
                    @threatLevel.Humanize()
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12">
        @if (MedRunnerClientConfig.IsMock)
        {
            <MudAlert Severity="@Severity.Warning">
                The MedRunner API is currently in local mock mode.
                Submitting this request will will not contact the live MedRunner API.
            </MudAlert>
        }
        else
        {
            <MudAlert Severity="@Severity.Info">
                By submitting this request to this <b>live</b> service, you agree to the
                <MudLink Href="@ExternalLinkHelper.GetMedRunnerTosLink(ContentId)"
                         Target="_blank"
                         Typo="@Typo.inherit">
                    terms and conditions
                </MudLink>
                of the service provider.
            </MudAlert>
        }
    </MudItem>
    <MudItem xs="12">
        <MudButton Variant="@Variant.Filled"
                   Color="@Color.Error"
                   Class="w-100"
                   StartIcon="@Icons.Material.Filled.EmergencyShare"
                   OnClick="@StartMedRunnerEmergencyAsync"
                   Disabled="@SubmitDisabled">
            Submit request
        </MudButton>
        @if (Context.HasErrors)
        {
            <MudStack Class="mt-2">
                @foreach (var error in Context.Errors)
                {
                    <MudAlert Severity="@Severity.Error">
                        @error
                    </MudAlert>
                }
            </MudStack>
        }
    </MudItem>
</MudGrid>

@code
{

    private ThreatLevel? _threatLevel;
    private IGameEntity? _closestLocationEntity;

    private GameLocationEntity? ClosestLocation
        => _closestLocationEntity as GameLocationEntity;

    [MemberNotNullWhen(false, nameof(ClosestLocation), nameof(_threatLevel))]
    private bool SubmitDisabled
        => IsLoading
           || ClosestLocation is null
           || _threatLevel is null;

    private async Task StartMedRunnerEmergencyAsync()
    {
        if (SubmitDisabled)
        {
            return;
        }

        await PerformSafeAsync(async () =>
            {
                var request = new CreateEmergencyRequest
                {
                    Location = CreateMedRunnerLocation(ClosestLocation),
                    ThreatLevel = _threatLevel.Value,
                };
                var emergencyResponse = await MedRunner.Emergency.CreateEmergencyAsync(request);

                if (!emergencyResponse.Success)
                {
                    Context.Errors.Add(emergencyResponse.ErrorMessage);
                    await ContextChanged.InvokeAsync(Context);
                    return;
                }

                Context.Emergency = emergencyResponse.Data;
                await ContextChanged.InvokeAsync(Context);
            }
        );
    }

    private Location CreateMedRunnerLocation(GameLocationEntity location)
        => new()
        {
            System = location.CreatePathToRoot().OfType<GameStarSystem>().First().Name.MainContent.FullName,
            Subsystem = location.CreatePathToRoot().OfType<GamePlanet>().First().Name.MainContent.FullName,
            TertiaryLocation = new StringBuilder().AppendJoin(
                    " / ",
                    location.CreatePathToRoot()
                        .Reverse()
                        .Where(x => x is not GameStarSystem and not GamePlanet)
                        .Select(x => x.Name.MainContent.FullName)
                        .Append(location.Name.MainContent.FullName)
                )
                .ToString(),
        };

}
