@using Arkanis.Overlay.Components.Shared.Dialogs
@inject IDialogService DialogService

<SectionContent SectionId="@RenderSections.OverlayControls.BottomRight">
    <div class="pa-4">
        <KeyboardShortcutBadge Keys="@( [KeyboardKey.AltLeft, KeyboardKey.ShiftLeft, KeyboardKey.KeyA])"
                               OnKeyPress="@AddModulesAsync"
                               Origin="@Origin.CenterLeft"
                               IsActive>
            <MudFab
                Color="@Color.Primary"
                StartIcon="@Icons.Material.Filled.Add"
                OnClick="@AddModulesAsync"/>
        </KeyboardShortcutBadge>
    </div>
</SectionContent>

<!--suppress CssUnresolvedCustomProperty -->
<MudContainer Class="mb-12">
    <MudStack Spacing="6">
        <HangarInventoryEntryCard
            Model="@Entry"
            Static/>

        <MudGrid>
            @foreach (var moduleGroup in Entry.Modules.GroupBy(m => m.Category))
            {
                <MudItem xs="12" sm="12" md="6">
                    <MudPaper Class="overflow-hidden hover-parent">
                        <MudStack Spacing="2"
                                  AlignItems="@AlignItems.Center"
                                  Style="height: 64px"
                                  Class="pa-4 flex-truncate"
                                  Row>
                            <QuantityCountBadge
                                Models="@moduleGroup.Select(x => x.Quantity)"/>
                            <GameEntityNameLabel
                                Model="@moduleGroup.Key.Name"/>
                            <MudSpacer/>
                            <MudStack Class="visible-on-parent-hover" Row>
                                <MudIconButton
                                    OnClick="@(() => AddModulesAsync(moduleGroup.Key))"
                                    Icon="@Icons.Material.Filled.Add"
                                    Color="@Color.Success"/>
                            </MudStack>
                        </MudStack>
                        <MudDivider/>
                        <MudStack Spacing="0">
                            @foreach (var module in moduleGroup)
                            {
                                <MudStack Class="px-4 py-0 w-100"
                                          Style="background: var(--mud-palette-background);"
                                          AlignItems="@AlignItems.Center"
                                          Row>
                                    <MudChip T="string"
                                             Variant="@Variant.Outlined"
                                             Color="@Color.Default"
                                             Size="@Size.Small"
                                             Class="ma-0">
                                        <QuantityLabel
                                            Model="@module.Quantity"/>
                                    </MudChip>
                                    <GameEntityNameLabel
                                        Model="@(module.ItemReference.Name)"
                                        PropertyFilter="@(prop => prop.Key is not GameItem.CategoryPropertyName)"
                                        PropertyLimit="4"
                                        Class="mb-2 flex-truncate"
                                        Typo="@Typo.h6"/>
                                    <MudSpacer/>
                                    <div class="visible-on-parent-hover">
                                        <MudTooltip Text="Transfer"
                                                    Placement="@Placement.Top">
                                            <MudIconButton
                                                OnClick="@(() => TransferAsync(module))"
                                                Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft"
                                                Size="@Size.Medium"
                                                Color="@Color.Info"/>
                                        </MudTooltip>
                                    </div>
                                </MudStack>
                                <MudDivider/>
                            }
                        </MudStack>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>

        <MudPaper>
            <MudStack Spacing="2"
                      AlignItems="@AlignItems.Center"
                      Style="height: 64px"
                      Class="pa-4 flex-truncate"
                      Row>
                <QuantityCountBadge
                    Models="@Entry.Inventory.Select(x => x.Quantity)"/>
                <MudText Typo="@Typo.h5">
                    Vehicle Inventory
                </MudText>
                <MudSpacer/>
                <MudStack Class="visible-on-parent-hover" Row>
                </MudStack>
            </MudStack>
            <InventoryEntryDataGrid Models="@Entry.Inventory.ToArray()">
                <EntryActionsContent>
                    <DefaultInventoryEntryCellActions
                        @bind-Model="@context.Item"/>
                </EntryActionsContent>
            </InventoryEntryDataGrid>
        </MudPaper>
    </MudStack>
</MudContainer>

@code
{

    [Parameter]
    [EditorRequired]
    public required HangarInventoryEntry Entry { get; set; }

    private async Task AddModulesAsync()
        => await AddModulesAsync(null);

    private async Task AddModulesAsync(GameProductCategory? category)
    {
        if (await InventoryEntryUpdateDialog.ShowTransferModuleToAsync(DialogService, Entry, category) is not null)
        {
            // TODO: Propagate change
            // await RefreshDataAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task TransferAsync(VehicleModuleEntry moduleEntry)
    {
        if (await InventoryEntryUpdateDialog.ShowTransferAsync(DialogService, moduleEntry) is not null)
        {
            // TODO: Propagate change
            // await RefreshDataAsync();
            await InvokeAsync(StateHasChanged);
        }
    }
}
