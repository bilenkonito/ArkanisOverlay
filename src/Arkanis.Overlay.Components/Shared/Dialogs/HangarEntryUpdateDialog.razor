@using Arkanis.Overlay.Domain.Abstractions.Game
@inject IInventoryManager InventoryManager
@inject IAnalyticsEventReporter EventReporter
@inject ILogger<InventoryEntryUpdateDialog> Logger

<MudDialog DefaultFocus="@DefaultFocus.Element" ContentClass="py-2">
    <TitleContent>
        <span>Hangar Modification</span>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <GameEntitySelectBox
                    Label="Hangar Entity"
                    Value="@SourceModel.Entity"
                    Disabled/>
            </MudItem>
            <MudItem xs="12">
                <GameEntitySelectBox
                    Label="Location"
                    Placeholder="Search for a game location"
                    HelperText="@LocationHelperText"
                    EntityCategory="@GameEntityCategory.Location"
                    Accept="@Location"
                    @bind-Value="TargetLocationEntity"/>
            </MudItem>
            <MudItem xs="12">
                <MudTextField
                    Label="Custom name"
                    @bind-Value="@_nameTag"
                    Clearable/>
            </MudItem>
            <MudItem xs="12">
                <MudCheckBox
                    Label="Is a pledged vehicle"
                    @bind-Value="@_isPledged"
                    Color="@Color.Success"
                    UncheckedColor="@Color.Default"/>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Cancel</MudButton>
        <MudButton Color="@Color.Success"
                   OnClick="@SubmitAsync"
                   Disabled="@(!CanSubmit)">
            Submit
        </MudButton>
    </DialogActions>
</MudDialog>

@code
{

    private string? _nameTag;
    private bool _isPledged;

    private bool CanSubmit
        => true;

    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public required HangarInventoryEntry SourceModel { get; set; }

    [Parameter]
    public IGameEntity? TargetLocationEntity { get; set; }

    private string LocationHelperText
        => $"Previously at {SourceModel.Location.Name.MainContent.FullName}";

    public IGameLocation? TargetLocation
        => TargetLocationEntity as IGameLocation;

    private async Task SubmitAsync()
    {
        if (!CanSubmit)
        {
            return;
        }

        if (TargetLocation is not null && SourceModel is IGameLocatedAt locatedAt && locatedAt.Location.Id != TargetLocation.Id)
        {
            // TODO: hangar event
            // await EventReporter.TrackEventAsync(InventoryEvents.AssignLocation());
        }

        var updatedModel = SourceModel.SetLocation(TargetLocation ?? GameLocationEntity.Unknown);
        if (updatedModel is not HangarInventoryEntry hangarEntry)
        {
            // TODO: cannot happen now
            return;
        }

        hangarEntry.NameTag = _nameTag;
        hangarEntry.IsPledged = _isPledged;
        await InventoryManager.AddOrUpdateEntryAsync(hangarEntry);

        MudDialog.Close(DialogResult.Ok(SourceModel));
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _nameTag = SourceModel.NameTag;
        _isPledged = SourceModel.IsPledged;
        if (SourceModel.Location != GameLocationEntity.Unknown)
        {
            TargetLocationEntity ??= SourceModel.Location;
        }
    }

    private void Cancel()
        => MudDialog.Cancel();

    public static async Task<InventoryEntryBase?> ShowAsync(IDialogService dialogService, HangarInventoryEntry model, IGameLocation? location = null)
    {
        var dialogParameters = new DialogParameters<HangarEntryUpdateDialog>
        {
            [nameof(SourceModel)] = model,
            [nameof(TargetLocationEntity)] = location,
        };
        var dialogOptions = new DialogOptions
        {
            FullWidth = true,
            CloseOnEscapeKey = true,
            CloseButton = true,
        };

        var dialogRef = await dialogService.ShowAsync<HangarEntryUpdateDialog>(null, dialogParameters, dialogOptions);
        return await dialogRef.GetReturnValueAsync<HangarInventoryEntry>();
    }

    private bool Location(IGameEntity entity)
        => entity is GameSpaceStation or GameCity or GameOutpost;

}
