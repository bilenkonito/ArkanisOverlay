@using Arkanis.Overlay.Domain.Abstractions.Game
@inject IInventoryManager InventoryManager
@inject IAnalyticsEventReporter EventReporter
@inject ILogger<InventoryEntryUpdateDialog> Logger

<MudDialog DefaultFocus="@DefaultFocus.Element" ContentClass="py-2">
    <TitleContent>
        <MudText Typo="@Typo.h6">
            @if (IsTransferMode)
            {
                <span>Inventory Transfer</span>
            }
            else
            {
                <span>Inventory Modification</span>
            }
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <InventoryEntrySelectBox
                    T="@(InventoryEntryBase?)"
                    Label="Inventory Entity"
                    @bind-Value="@SourceModel"
                    @bind-Value:after="@ConfigureDefaults"
                    Accept="@InventoryAccept"
                    Disabled="@SourceModelProvided"
                    Required/>
            </MudItem>
            <MudItem xs="12">
                <QuantityField
                    AmountHelperText="@AmountHelperText"
                    @bind-Value="@TargetQuantity"
                    Max="@(IsTransferMode && SourceModel is not null ? SourceModel.Quantity.Amount : int.MaxValue)"
                    DisabledUnitChange="@IsTransferMode"/>
            </MudItem>
            <MudItem xs="12">
                <InventoryListSelect
                    HelperText="@ListHelperText"
                    @bind-Value="@TargetList"/>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="@Typo.body1">
                    Entry Placement
                </MudText>
            </MudItem>
            <MudItem xs="12">
                <GameEntitySelectBox
                    Label="Location"
                    Placeholder="Search for a game location"
                    HelperText="@LocationHelperText"
                    HasError="@(LocationErrorText is not null)"
                    ErrorText="@LocationErrorText"
                    EntityCategory="@GameEntityCategory.Location"
                    Accept="@Location"
                    @bind-Value="TargetLocationEntity"
                    Disabled="@(TargetHangarEntry is not null || IsTargetLocationLocked)"/>
            </MudItem>
            <MudItem xs="12">
                <HorizontalDivider Text="or"/>
            </MudItem>
            <MudItem xs="12">
                <InventoryEntrySelectBox
                    T="@HangarInventoryEntry"
                    Label="Vehicle"
                    Placeholder="Search for a hangar vehicle"
                    @bind-Value="@TargetHangarEntry"
                    HelperText="@HangarHelperText"
                    HasError="@(LocationErrorText is not null)"
                    ErrorText="@LocationErrorText"
                    Disabled="@(TargetLocationEntity is not null || IsTargetLocationLocked)"/>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Cancel</MudButton>
        <MudButton Color="@Color.Success"
                   OnClick="@SubmitAsync"
                   Disabled="@(!CanSubmit)">
            Submit
        </MudButton>
    </DialogActions>
</MudDialog>

@code
{

    private string? LocationErrorText
        => IsTransferMode
            ? this is { TargetLocation: null, TargetHangarEntry: null }
                ? "A target location is required"
                : null
            : null;

    private bool CanSubmit
        => TargetQuantity.Amount > 0
           && SourceModel is not null
           && (IsEditMode || TargetLocation is not null || TargetHangarEntry is not null);

    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public InventoryEntryBase? SourceModel { get; set; }

    [Parameter]
    public Quantity TargetQuantity { get; set; } = Quantity.Default;

    [Parameter]
    public IGameEntity? TargetLocationEntity { get; set; }

    [Parameter]
    public HangarInventoryEntry? TargetHangarEntry { get; set; }

    [Parameter]
    public InventoryEntryList? TargetList { get; set; }

    [Parameter]
    public Func<InventoryEntryBase, bool> InventoryAccept { get; set; } = _ => true;

    [Parameter]
    public ModeType Mode { get; set; }

    [Parameter]
    public VehicleInventoryType VehicleInventoryType { get; set; }

    [Parameter]
    public bool SourceModelProvided { get; set; }

    private bool IsTargetLocationLocked
        => IsTransferToMode;

    private string AmountHelperText
        => IsTransferMode && (SourceModelProvided || IsTargetLocationLocked) && SourceModel is not null
            ? $"Up to {SourceModel.Quantity} available"
            : string.Empty;

    private string LocationHelperText
        => IsTransferMode && (SourceModelProvided || IsTargetLocationLocked)
            ? SourceModel is IGameLocatedAt locatedAt
                ? $"Previously at {locatedAt.Location.Name.MainContent.FullName}"
                : "Previously unassigned"
            : string.Empty;

    private string HangarHelperText
        => IsTransferMode && (SourceModelProvided || IsTargetLocationLocked)
            ? SourceModel is HangarInventoryEntry hangarInventory
                ? $"Previously in {hangarInventory.VehicleReference.Name.MainContent.FullName} at {hangarInventory.Location.Name.MainContent.FullName}"
                : "Previously unassigned"
            : string.Empty;

    private string ListHelperText
        => IsTransferMode && (SourceModelProvided || IsTargetLocationLocked)
            ? SourceModel?.List is { } list
                ? $"Previously in {list.Name}"
                : "Previously unassigned"
            : string.Empty;

    private bool IsEditMode
        => Mode is ModeType.Edit;

    private bool IsTransferMode
        => Mode is ModeType.Transfer
            or ModeType.TransferTo;

    private bool IsTransferToMode
        => Mode is ModeType.TransferTo;

    public IGameLocation? TargetLocation
        => TargetLocationEntity as IGameLocation;

    private async Task SubmitAsync()
    {
        if (!CanSubmit || SourceModel is null)
        {
            return;
        }

        if (TargetList is not null && SourceModel.List != TargetList)
        {
            await EventReporter.TrackEventAsync(InventoryEvents.AssignList());
        }

        if (TargetLocation is not null && SourceModel is IGameLocatedAt locatedAt && locatedAt.Location.Id != TargetLocation.Id)
        {
            await EventReporter.TrackEventAsync(InventoryEvents.AssignLocation());
        }

        if (IsEditMode || SourceModel.Quantity.HasSameAmountAs(TargetQuantity))
        {
            // the entry is updated as a whole
            SourceModel.Quantity.Amount = TargetQuantity.Amount;
            SourceModel.Quantity.Unit = TargetQuantity.Unit;
            SourceModel.List = TargetList;
            var updatedModel = this switch
            {
                { TargetHangarEntry: not null } => SourceModel.TransferTo(TargetHangarEntry, VehicleInventoryType),
                { TargetLocation: not null } => SourceModel.TransferTo(TargetLocation),
                _ => SourceModel,
            };

            await InventoryManager.AddOrUpdateEntryAsync(updatedModel);
        }
        else
        {
            var transferModel = InventoryEntry.CreateFrom(SourceModel, TargetQuantity, TargetLocation, TargetHangarEntry, TargetList);
            await InventoryManager.AddOrUpdateEntryAsync(transferModel);

            SourceModel.Quantity.Amount -= TargetQuantity.Amount;
            await InventoryManager.AddOrUpdateEntryAsync(SourceModel);
        }

        MudDialog.Close(DialogResult.Ok(SourceModel));
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ConfigureDefaults();
    }

    private void ConfigureDefaults()
    {
        if (IsEditMode)
        {
            // only configure defaults if the target location is not locked

            if (TargetHangarEntry is null)
            {
                TargetLocationEntity ??= SourceModel switch
                {
                    IGameLocatedAt locatedAt => locatedAt.Location,
                    _ => null,
                };
            }

            if (TargetLocationEntity is null)
            {
                TargetHangarEntry ??= SourceModel switch
                {
                    IVehicleInventory entry => entry.HangarEntry,
                    _ => null,
                };
            }
        }

        TargetList ??= SourceModel?.List;
        TargetQuantity = SourceModel is not null
            ? new Quantity(SourceModel.Quantity.Amount, SourceModel.Quantity.Unit)
            : Quantity.Default;
    }

    private void Cancel()
        => MudDialog.Cancel();

    public static async Task<InventoryEntryBase?> ShowEditAsync(IDialogService dialogService, IGameEntity gameEntity, IGameLocation? location = null)
        => await ShowAsync(
            dialogService,
            new Parameters(ModeType.Edit)
            {
                Mode = ModeType.Edit,
                Model = InventoryEntry.Create(gameEntity, Quantity.Default),
                Location = location,
            }
        );

    public static async Task<InventoryEntryBase?> ShowEditAsync(IDialogService dialogService, InventoryEntryBase model, IGameLocation? location = null)
        => await ShowAsync(
            dialogService,
            new Parameters(ModeType.Edit)
            {
                Model = model,
                Location = location,
            }
        );

    public static async Task<InventoryEntryBase?> ShowTransferAsync(IDialogService dialogService, InventoryEntryBase model, IGameLocation? location = null)
        => await ShowAsync(
            dialogService,
            new Parameters(ModeType.Transfer)
            {
                Model = model,
                Location = location,
            }
        );

    public static async Task<InventoryEntryBase?> ShowTransferCargoToAsync(IDialogService dialogService, HangarInventoryEntry hangarEntry)
        => await ShowAsync(
            dialogService,
            new Parameters(ModeType.TransferTo)
            {
                HangarEntry = hangarEntry,
                VehicleInventoryType = VehicleInventoryType.Cargo,
                InventoryAccept = entry => entry.Quantity.Reference.Entity is GameItem or GameCommodity,
            }
        );

    public static async Task<InventoryEntryBase?> ShowTransferModuleToAsync(IDialogService dialogService, HangarInventoryEntry hangarEntry, GameProductCategory? itemCategory = null)
        => await ShowAsync(
            dialogService,
            new Parameters(ModeType.TransferTo)
            {
                HangarEntry = hangarEntry,
                VehicleInventoryType = VehicleInventoryType.Module,
                InventoryAccept = entry
                    => entry is not VehicleModuleEntry
                       && entry is not VehicleInventoryEntry
                       && entry.Quantity.Reference.Entity is GameItem gameItem
                       && (itemCategory is null || gameItem.Category == itemCategory),
            }
        );

    private static async Task<InventoryEntryBase?> ShowAsync(
        IDialogService dialogService,
        Parameters parameters
    )
    {
        var dialogParameters = new DialogParameters<InventoryEntryUpdateDialog>
        {
            [nameof(Mode)] = parameters.Mode,
            [nameof(SourceModel)] = parameters.Model,
            [nameof(SourceModelProvided)] = parameters.Model is not null,
            [nameof(VehicleInventoryType)] = parameters.VehicleInventoryType,
            [nameof(TargetLocationEntity)] = parameters.Location,
            [nameof(TargetHangarEntry)] = parameters.HangarEntry,
            [nameof(InventoryAccept)] = parameters.InventoryAccept,
        };
        var dialogOptions = new DialogOptions
        {
            FullWidth = true,
            CloseOnEscapeKey = true,
            CloseButton = true,
        };

        var dialogRef = await dialogService.ShowAsync<InventoryEntryUpdateDialog>(null, dialogParameters, dialogOptions);
        return await dialogRef.GetReturnValueAsync<InventoryEntryBase>();
    }

    private bool Location(IGameEntity entity)
        => entity is GameSpaceStation or GameCity or GameOutpost;

    public enum ModeType
    {
        Edit,
        Transfer,
        TransferTo,
    }

    public class Parameters(ModeType mode)
    {
        public ModeType Mode { get; init; } = mode;
        public InventoryEntryBase? Model { get; init; }
        public IGameLocation? Location { get; init; }
        public HangarInventoryEntry? HangarEntry { get; init; }
        public Func<InventoryEntryBase, bool>? InventoryAccept { get; init; } = _ => true;
        public VehicleInventoryType VehicleInventoryType { get; init; } = VehicleInventoryType.Cargo;
    }
}
