@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using System.Security.Claims
@using Arkanis.Overlay.External.MedRunner.API.Abstractions
@using Arkanis.Overlay.External.MedRunner.Models
@inject IMedRunnerTokenProvider TokenProvider
@inject IMedRunnerApiClient MedRunner

<!--suppress CssUnusedSymbol, CssUnresolvedCustomProperty -->
<style>
    .mud-dialog.emergency {
        .mud-dialog-content {
            background-color: var(--mud-palette-background-gray);
            border-top-left-radius: 0;
            border-top-right-radius: 0;
        }

        .mud-timeline-item-dot {
            background-color: var(--mud-palette-background-gray);
        }

        .mud-dialog-title {
            background-color: var(--mud-palette-error);
            color: white;

            .mud-icon-button {
                color: white;
            }
        }

        .scenario {
            flex-grow: 1;
            max-width: 220px;
            cursor: pointer;
            user-select: none;

            img {
                pointer-events: none;
            }
        }

        [disabled="true"].scenario {
            opacity: 0.5;
            cursor: not-allowed;
        }

        [disabled="true"].scenario:active {
            pointer-events: none;
        }

        .review textarea {
            min-height: 80px;
        }

        .chat-input textarea {
            min-height: 40px;

        }

        .mud-stepper-nav {
            background-color: var(--mud-palette-surface);
        }

        .mud-stepper,
        .mud-stepper-actions {
            padding: 0;
        }

        .mud-stepper-content,
        .mud-stepper-complete {
            padding: 0;
            border-color: var(--mud-palette-divider);
            border-width: 1px;
            border-style: solid none solid none;
        }
    }
</style>

<MudDialog Gutters="false" Class="emergency" ContentClass="ma-0">
    <TitleContent>
        <MudStack AlignItems="@AlignItems.Center" Row>
            <MudIcon
                Icon="@Icons.Material.Filled.Emergency"/>
            <MudText Typo="Typo.h5">
                Emergency Services
            </MudText>
        </MudStack>
    </TitleContent>
    <DialogContent>
        @if (_isLoading)
        {
            <MudProgressLinear
                Style="position: absolute; top: 0; left: 0;"
                Indeterminate/>
        }
        <MudStepper @ref="_stepper"
                    @bind-ActiveIndex="@_activeStepIndex">
            <ChildContent>
                <MudStep Title="Select a scenario"
                         Class="pa-0"
                         Completed="@ScenarioInProgress"
                         Disabled="@ScenarioInProgress">
                    <MudText Typo="@Typo.body1"
                             Align="@Align.Center"
                             Class="my-8">
                        Please pick an emergency scenario and the corresponding service provider below.
                    </MudText>
                    <MudStack AlignItems="@AlignItems.Center"
                              Justify="@Justify.Center"
                              Class="mb-8"
                              Row>
                        <MudCard Elevation="4"
                                 Class="@ScenarioClassesFor(Scenario.MedRunnerSearchAndRescue)"
                                 @onclick="@(() => SelectScenarioAsync(Scenario.MedRunnerSearchAndRescue))"
                                 disabled="@(_medRunnerContext.IsDisabled.ToString())">
                            <MudCardHeader>
                                <MudText Typo="@Typo.h6"
                                         Align="@Align.Center"
                                         Class="w-100">
                                    Search & Rescue
                                </MudText>
                            </MudCardHeader>
                            <MudCardContent Class="pt-0">
                                <MudStack AlignItems="@AlignItems.Center"
                                          Justify="@Justify.Center">
                                    <MudText Typo="@Typo.caption"
                                             Align="@Align.Center">
                                        Fast and reliable rescue operations against all odds.
                                    </MudText>
                                    <MudImage
                                        Class="my-2"
                                        Style="width: 120px;"
                                        Src="@LinkHelper.GetPathToAsset("img/medrunner-logo-white.svg")"/>
                                    @if (_medRunnerContext.ClientIsActive)
                                    {
                                        <MudText Typo="@Typo.caption"
                                                 Align="@Align.Center"
                                                 Color="@Color.Success">
                                            Subscription Active<br/>@_medRunnerContext.ClientIdentity.Name
                                        </MudText>
                                    }
                                    @if (_medRunnerContext.IsServiceUnavailable)
                                    {
                                        <MudText Typo="@Typo.caption"
                                                 Align="@Align.Center"
                                                 Color="@Color.Error">
                                            Currently Unavailable
                                        </MudText>
                                    }
                                </MudStack>
                            </MudCardContent>
                        </MudCard>
                    </MudStack>
                </MudStep>
                <MudStep Title="Provide details"
                         Class="pa-0"
                         Completed="@ScenarioInProgress"
                         Disabled="@ScenarioInProgress">
                    <MudStack Class="px-4 my-4" Row>
                        @PreviousButton
                    </MudStack>
                    <MudText Typo="@Typo.body1"
                             Align="@Align.Center"
                             Class="my-6">
                        Please provide necessary emergency details for the alert responders.
                    </MudText>
                    <MedRunnerEmergencyCreation
                        @bind-IsLoading="@_isLoading"
                        @bind-Context="@_medRunnerContext"
                        @bind-Context:after="@ContinueOnEmergencyCreationAsync"/>
                </MudStep>
                <MudStep Title="Wait for response"
                         Class="pa-0">
                    <MedRunnerEmergencyManagement
                        @bind-IsLoading="@_isLoading"
                        @bind-Context="@_medRunnerContext"
                        @bind-Context:after="@ContinueOnEmergencyFinalizationAsync"/>
                </MudStep>
            </ChildContent>
            <CompletedContent>
                <MedRunnerEmergencyReview
                    @bind-IsLoading="@_isLoading"
                    @bind-Context="@_medRunnerContext"
                    @bind-Context:after="@Close"/>
            </CompletedContent>
            <ActionContent>
                @* Navigation is managed by controls within individual steps. *@
            </ActionContent>
        </MudStepper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    private bool _isLoading;
    private Scenario _selectedScenario;
    private MudStepper? _stepper;

    private int _activeStepIndex;

    private MedRunnerContext _medRunnerContext = new();

    private bool ScenarioInProgress
        => _medRunnerContext.Emergency is not null;

    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; set; }

    public RenderFragment PreviousButton
        => @<MudButton StartIcon="@Icons.Material.Filled.ChevronLeft"
                       OnClick="@(() => _stepper?.PreviousStepAsync() ?? Task.CompletedTask)">
               Previous step
           </MudButton>;

    private void Cancel()
        => MudDialog.Cancel();

    private void Close()
        => MudDialog.Close();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshMedRunnerDataAsync();
    }

    private async Task RefreshMedRunnerDataAsync()
    {
        try
        {
            _isLoading = true;
            await _medRunnerContext.UpdateAsync(MedRunner);
        }
        finally
        {
            _isLoading = false;
        }
    }

    public static async Task<DialogResult> ShowAsync(IDialogService dialogService)
    {
        var dialogOptions = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            FullScreen = false,
            CloseOnEscapeKey = false,
            CloseButton = true,
        };
        var dialogRef = await dialogService.ShowAsync<EmergencyDialog>(null, dialogOptions);
        return await dialogRef.Result ?? DialogResult.Cancel();
    }

    private async Task SelectScenarioAsync(Scenario scenario)
    {
        _selectedScenario = scenario;
        await _stepper!.NextStepAsync();
    }

    private async Task ContinueOnEmergencyCreationAsync()
    {
        if (_medRunnerContext.IsEmergencyInProgress)
        {
            await _stepper!.NextStepAsync();
        }
    }

    private async Task ContinueOnEmergencyFinalizationAsync()
    {
        if (_medRunnerContext.Emergency is { CompletedAt: not null })
        {
            await _stepper!.NextStepAsync();
        }
    }

    private const string ScenarioBaseClasses = "scenario focus";

    public string ScenarioClassesFor(Scenario thisScenario)
        => thisScenario == _selectedScenario
            ? $"{ScenarioBaseClasses} active"
            : ScenarioBaseClasses;

    public class MedRunnerContext
    {
        public bool IsDisabled
            => IsEnabled is false;

        public bool IsEnabled
            => ClientIsActive && IsServiceAvailable;

        public bool IsServiceUnavailable
            => !IsServiceAvailable;

        public bool IsServiceAvailable
            => Settings is { EmergenciesEnabled: true };

        [MemberNotNullWhen(true, nameof(ClientInfo))]
        public bool ClientIsActive
            => ClientInfo is { Active: true }
               && ClientStatus is { Blocked: false };

        [MemberNotNullWhen(true, nameof(Emergency))]
        public bool IsEmergencyInProgress
            => Emergency is { CompletionTimestamp: null };

        public List<string> Errors { get; init; } = [];

        public Emergency? Emergency { get; set; }

        public Person? ClientInfo { get; set; }
        public ClientBlockedStatus ClientStatus { get; set; } = new();

        public ClaimsIdentity ClientIdentity { get; set; } = new();

        public PublicOrgSettings Settings { get; set; } = new()
        {
            Status = ServiceStatus.Unknown,
            EmergenciesEnabled = false,
            AnonymousAlertsEnabled = false,
            RegistrationEnabled = false,
            MessageOfTheDay = null,
            LocationSettings = new LocationSettings
            {
                Locations = [],
            },
        };

        public async Task UpdateAsync(IMedRunnerApiClient api)
        {
            Errors.Clear();

            await api.WebSocket.InitializeAsync();
            // api.WebSocket.Events.EmergencyCreated += (_, emergency) => Emergency = emergency;
            // api.WebSocket.Events.EmergencyUpdated += (_, emergency) => Emergency = emergency;

            var settingsResponse = await api.OrgSettings.GetPublicSettingsAsync();
            if (settingsResponse.Success)
            {
                Settings = settingsResponse.Data;
                if (api.TokenProvider.IsAuthenticated)
                {
                    ClientIdentity = api.TokenProvider.Identity;
                }
            }
            else
            {
                Errors.Add(settingsResponse.ErrorMessage);
                return;
            }

            await UpdateClientAsync(api);
        }

        private async Task UpdateClientAsync(IMedRunnerApiClient api)
        {
            Errors.Clear();

            var clientBlockedResponse = await api.Client.GetBlockedStatusAsync();
            if (clientBlockedResponse.Success)
            {
                ClientStatus = clientBlockedResponse.Data;
            }
            else
            {
                Errors.Add(clientBlockedResponse.ErrorMessage);
                return;
            }

            var clientResponse = await api.Client.GetAsync();
            if (clientResponse.Success)
            {
                ClientInfo = clientResponse.Data;
            }
            else
            {
                Errors.Add(clientResponse.ErrorMessage);
            }
        }
    }

    public enum Scenario
    {
        Unselected,

        [Description("Search & Rescue (MedRunner)")]
        MedRunnerSearchAndRescue,
    }
}

