@using System.ComponentModel
@using Arkanis.Overlay.External.MedRunner.API.Abstractions
@using Arkanis.Overlay.External.MedRunner.Models
@implements IDisposable
@inject IDialogService DialogService
@inject IMedRunnerApiClient MedRunner

<!--suppress CssUnusedSymbol, CssUnresolvedCustomProperty -->
<style>
    .mud-dialog.emergency {
        .mud-dialog-content {
            background-color: var(--mud-palette-background-gray);
            border-top-left-radius: 0;
            border-top-right-radius: 0;
        }

        .mud-timeline-item-dot {
            background-color: var(--mud-palette-background-gray);
        }

        .mud-dialog-title {
            background-color: var(--mud-palette-error);
            color: white;

            .mud-icon-button {
                color: white;
            }
        }

        .scenario {
            flex-grow: 1;
            max-width: 220px;
            cursor: pointer;
            user-select: none;

            img {
                pointer-events: none;
            }
        }

        [disabled="true"].scenario {
            opacity: 0.5;
            cursor: not-allowed;
        }

        [disabled="true"].scenario:active {
            pointer-events: none;
        }

        .review textarea {
            min-height: 80px;
        }

        .chat-input textarea {
            min-height: 40px;

        }

        .mud-stepper-nav {
            background-color: var(--mud-palette-surface);
        }

        .mud-stepper {
            padding: 0;
        }

        .mud-stepper-content,
        .mud-stepper-complete {
            padding: 0;
            border-color: var(--mud-palette-divider);
            border-width: 1px;
            border-style: solid none solid none;
        }
    }
</style>

<MudDialog Gutters="false" Class="emergency" ContentClass="ma-0">
    <TitleContent>
        <MudStack AlignItems="@AlignItems.Center" Row>
            <MudIcon
                Icon="@Icons.Material.Filled.Emergency"/>
            <MudText Typo="Typo.h5">
                Emergency Services
            </MudText>
        </MudStack>
    </TitleContent>
    <DialogContent>
        @if (_isLoading)
        {
            <MudProgressLinear
                Style="position: absolute; top: 0; left: 0;"
                Indeterminate/>
        }
        <MudStepper @ref="_stepper"
                    @bind-ActiveIndex="@_activeStepIndex">
            <ChildContent>
                <MudStep Title="Select a scenario"
                         Class="pa-0"
                         Completed="@ScenarioIsActive"
                         Disabled="@ScenarioIsActive">
                    <MudText Typo="@Typo.body1"
                             Align="@Align.Center"
                             Class="my-8">
                        Please pick an emergency scenario and the corresponding service provider below.
                    </MudText>
                    <MudStack AlignItems="@AlignItems.Center"
                              Justify="@Justify.Center"
                              Class="mb-8"
                              Row>
                        <MudStack>
                            <MudCard Elevation="4"
                                     Class="@ScenarioClassesFor(Scenario.MedRunnerSearchAndRescue)"
                                     @onclick="@(() => SelectScenarioAsync(Scenario.MedRunnerSearchAndRescue))"
                                     disabled="@(_medRunnerContext.IsDisabled.ToString().ToLowerInvariant())">
                                <MudCardHeader>
                                    <MudText Typo="@Typo.h6"
                                             Align="@Align.Center"
                                             Class="w-100">
                                        Search & Rescue
                                    </MudText>
                                </MudCardHeader>
                                <MudCardContent Class="pt-0">
                                    <MudStack AlignItems="@AlignItems.Center"
                                              Justify="@Justify.Center">
                                        <MudText Typo="@Typo.caption"
                                                 Align="@Align.Center">
                                            Fast and reliable rescue operations against all odds.
                                        </MudText>
                                        <MedRunnerLogo
                                            Class="my-2"
                                            Style="width: 120px;"
                                            WithoutLink/>
                                        @if (_isLoading)
                                        {
                                            <div class="w-100">
                                                <MudSkeleton/>
                                                <MudSkeleton/>
                                            </div>
                                        }
                                        else if (_medRunnerContext.IsClientAuthenticated)
                                        {
                                            @if (_medRunnerContext.ClientHasValidSubscription)
                                            {
                                                <MudText Typo="@Typo.caption"
                                                         Align="@Align.Center"
                                                         Color="@Color.Success">
                                                    Subscription Active<br/>@_medRunnerContext.ClientIdentity.Name
                                                </MudText>
                                            }
                                            else if (_medRunnerContext.ClientIsInactive)
                                            {
                                                <MudText Typo="@Typo.caption"
                                                         Align="@Align.Center"
                                                         Color="@Color.Warning">
                                                    Subscription Inactive<br/>@_medRunnerContext.ClientIdentity.Name
                                                </MudText>
                                            }
                                            else if (_medRunnerContext.ClientIsBlocked)
                                            {
                                                <MudText Typo="@Typo.caption"
                                                         Align="@Align.Center"
                                                         Color="@Color.Warning">
                                                    Account Disabled<br/>@_medRunnerContext.ClientIdentity.Name
                                                </MudText>
                                            }

                                            @if (_medRunnerContext.IsServiceUnavailable)
                                            {
                                                <MudText Typo="@Typo.caption"
                                                         Align="@Align.Center"
                                                         Color="@Color.Error">
                                                    Currently Unavailable
                                                </MudText>
                                            }
                                        }
                                    </MudStack>
                                </MudCardContent>
                            </MudCard>
                            @if (!_isLoading && !_medRunnerContext.IsClientAuthenticated)
                            {
                                <MudText Typo="@Typo.caption"
                                         Align="@Align.Center"
                                         Class="text-secondary cursor-pointer"
                                         @onclick="@StartMedRunnerSetupAsync">
                                    <i>
                                        No valid account connected
                                    </i>
                                </MudText>
                            }
                            @foreach (var error in _medRunnerContext.Errors)
                            {
                                <MudText Typo="@Typo.caption"
                                         Align="@Align.Center"
                                         Color="@Color.Error">
                                    @error
                                </MudText>
                            }
                        </MudStack>
                    </MudStack>
                </MudStep>
                <MudStep Title="Provide details"
                         Class="pa-0"
                         Completed="@ScenarioIsActive"
                         Disabled="@ScenarioIsActive">
                    <MudStack Class="px-4 my-4"
                              AlignItems="@AlignItems.Center"
                              Justify="@Justify.SpaceBetween"
                              Row>
                        @PreviousButton
                        <MedRunnerServiceProvidedBy
                            ContentId="@ContentId"/>
                    </MudStack>
                    <MudText Typo="@Typo.body1"
                             Align="@Align.Center"
                             Class="my-6">
                        Please provide necessary emergency details for the alert responders.
                    </MudText>
                    <MedRunnerEmergencyCreation
                        ContentId="@ContentId"
                        @bind-IsLoading="@_isLoading"
                        @bind-Context="@_medRunnerContext"
                        @bind-Context:after="@ContinueOnEmergencyCreationAsync"/>
                </MudStep>
                <MudStep Title="Handle emergency"
                         SecondaryText="@EmergencyHandlingDescription"
                         Class="pa-0">
                    <MedRunnerEmergencyManagement
                        ContentId="@ContentId"
                        @bind-IsLoading="@_isLoading"
                        @bind-Context="@_medRunnerContext"
                        @bind-Context:after="@ContinueOnEmergencyFinalizationAsync"/>
                </MudStep>
            </ChildContent>
            <CompletedContent>
                <MedRunnerEmergencyReview
                    ContentId="@ContentId"
                    @bind-IsLoading="@_isLoading"
                    @bind-Context="@_medRunnerContext"
                    @bind-Context:after="@Close"/>
            </CompletedContent>
            <ActionContent>
                @* Navigation is managed by controls within individual steps. *@
            </ActionContent>
        </MudStepper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel"
                   Disabled="@ScenarioInProgress">
            Close
        </MudButton>
    </DialogActions>
</MudDialog>

@code
{
    private const string ContentId = "report_emergency";

    private bool _isLoading;
    private Scenario _selectedScenario;
    private MudStepper? _stepper;

    private int _activeStepIndex;

    private MedRunnerComponentBase.ContextModel _medRunnerContext = new();

    private bool ScenarioIsActive
        => _medRunnerContext.Emergency is not null;

    private bool ScenarioInProgress
        => _medRunnerContext.IsEmergencyInProgress;

    public string EmergencyHandlingDescription
        => this switch
        {
            { ScenarioIsActive: true } => _medRunnerContext.Emergency?.Status switch
            {
                MissionStatus.Pending => "Wait for dispatch response",
                MissionStatus.Accepted => "Communicate with dispatch",
                _ => "Mission concluded",
            },
            _ => string.Empty,
        };

    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; set; }

    public RenderFragment PreviousButton
        => @<MudButton StartIcon="@Icons.Material.Filled.ChevronLeft"
                       OnClick="@(() => _stepper?.PreviousStepAsync() ?? Task.CompletedTask)">
               Previous step
           </MudButton>;

    private void Cancel()
        => MudDialog.Cancel();

    private void Close()
        => MudDialog.Close();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _medRunnerContext.Updated += OnExternalUpdate;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshMedRunnerDataAsync();
    }

    private async Task StartMedRunnerSetupAsync()
    {
        await MedRunnerSetupDialog.ShowAsync(DialogService);
        await RefreshMedRunnerDataAsync();
    }

    private async Task RefreshMedRunnerDataAsync()
    {
        try
        {
            _isLoading = true;
            await MedRunner.WebSocket.EnsureInitializedAsync();
            await _medRunnerContext.UpdateAsync(MedRunner);
            await UpdateDialogOptionsAsync();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SelectScenarioAsync(Scenario scenario)
    {
        _selectedScenario = scenario;
        await _stepper!.NextStepAsync();
        await UpdateDialogOptionsAsync();
    }

    private async Task ContinueOnEmergencyCreationAsync()
    {
        if (_medRunnerContext.IsEmergencyInProgress)
        {
            await _stepper!.NextStepAsync();
        }

        await UpdateDialogOptionsAsync();
    }

    private async Task ContinueOnEmergencyFinalizationAsync()
    {
        if (_medRunnerContext.Emergency is { Status: MissionStatus.Completed })
        {
            await _stepper!.NextStepAsync();
        }

        await UpdateDialogOptionsAsync();
    }

    private void OnExternalUpdate(object? _, EventArgs args)
        => InvokeAsync(StateHasChanged);

    private async Task UpdateDialogOptionsAsync()
    {
        var canClose = !ScenarioInProgress;
        await MudDialog.SetOptionsAsync(
            MudDialog.Options with
            {
                BackdropClick = canClose,
                CloseOnEscapeKey = canClose,
                CloseButton = canClose,
            }
        );
    }

    private const string ScenarioBaseClasses = "scenario focus";

    public string ScenarioClassesFor(Scenario thisScenario)
        => thisScenario == _selectedScenario
            ? $"{ScenarioBaseClasses} active"
            : ScenarioBaseClasses;

    public void Dispose()
    {
        _medRunnerContext.Updated -= OnExternalUpdate;
        _medRunnerContext.Dispose();
    }

    public static async Task<DialogResult> ShowAsync(IDialogService dialogService)
    {
        var dialogOptions = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            FullScreen = false,
            BackdropClick = true,
            CloseOnEscapeKey = true,
            CloseButton = true,
        };
        var dialogRef = await dialogService.ShowAsync<EmergencyDialog>(null, dialogOptions);
        return await dialogRef.Result ?? DialogResult.Cancel();
    }

    public enum Scenario
    {
        Unselected,

        [Description("Search & Rescue (MedRunner)")]
        MedRunnerSearchAndRescue,
    }
}



