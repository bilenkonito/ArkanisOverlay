@using System.Text
@using Arkanis.Overlay.External.MedRunner.API.Abstractions
@using Arkanis.Overlay.Infrastructure.Helpers
@inject IMedRunnerClientConfig MedRunnerClientConfig

<!--suppress CssUnusedSymbol, CssUnresolvedCustomProperty -->
<style>
    .medrunner-logo {
        position: relative;
        display: block;
    }

    .medrunner-logo.is-mocked:before {
        content: "LOCAL MODE";
        font-size: small;
        font-weight: bold;
        text-align: right;
        opacity: .75;
        color: yellow;
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
    }
</style>

@if (WithoutLink)
{
    @ImageContent
}
else
{
    <MudLink Href="@ExternalLinkHelper.GetMedRunnerLink(ContentId)" Target="_blank">
        @ImageContent
    </MudLink>
}

@code
{

    private RenderFragment ImageContent
        => @<picture class="@ClassContent">
               <MudImage
                   Style="@Style"
                   Src="@LinkHelper.GetPathToAsset(AssetPath)"
                   Alt="MedRunner"/>
           </picture>;

    private string AssetPath
        => this switch
        {
            { Horizontal: true, TransparentVariant: true } => "img/medrunner-logo-horizontal.svg",
            { Horizontal: true, TransparentVariant: false } => "img/medrunner-logo-horizontal-white.svg",
            { Horizontal: false, TransparentVariant: true } => "img/medrunner-logo.svg",
            { Horizontal: false, TransparentVariant: false } => "img/medrunner-logo-white.svg",
        };

    private string ClassContent
    {
        get
        {
            var builder = new StringBuilder("medrunner-logo");
            if (Class is not null)
            {
                builder.Append(' ');
                builder.Append(Class);
            }

            if (MedRunnerClientConfig.IsMock)
            {
                builder.Append(" is-mocked");
            }

            return builder.ToString();
        }
    }

    public bool TransparentVariant { get; set; }

    [Parameter]
    public bool Horizontal { get; set; }

    [Parameter]
    public bool WithoutLink { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string ContentId { get; set; } = "logo";

}
