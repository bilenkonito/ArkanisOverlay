@using Arkanis.Overlay.Components.Shared.Dialogs
@using Arkanis.Overlay.Domain.Abstractions.Game
@implements IDisposable
@inject InventoryViewModel ViewModel

<MudGrid Spacing="2">
    @if (WithoutText == false)
    {
        <MudItem xs="12" md="3">
            <MudTextField
                @bind-Value="@CurrentContext.Text"
                DebounceInterval="200"
                OnDebounceIntervalElapsed="@UpdateFilters"
                Label="Search"
                Placeholder="Item or commodity name"
                Clearable/>
        </MudItem>
    }
    @if (WithoutLocation == false)
    {
        <MudItem xs="12" md="3">
            <GameEntitySelectBox
                Label="Location"
                Placeholder="Search for a game location"
                EntityCategory="@GameEntityCategory.Location"
                Only="@FilteredLocations"
                @bind-Value="@CurrentContext.LocationEntity"
                @bind-Value:after="@UpdateFilters"/>
        </MudItem>
    }
    @if (WithoutList == false)
    {
        <MudItem xs="12" md="3">
            <InventoryListSelect
                @bind-Value="@CurrentContext.InventoryList"
                @bind-Value:after="@UpdateFilters"/>
        </MudItem>
    }
    <MudSpacer/>
    @if (WithoutBulkOperations == false)
    {
        <MudItem xs="12" md="3">
            <MudStack AlignItems="@AlignItems.Center"
                      Justify="@Justify.FlexEnd"
                      Row>
                <MudTooltip Text="Bulk assign list"
                            Placement="@Placement.Top">
                    <MudBadge Content="@SelectedEntries.Count"
                              Color="@Color.Info"
                              Origin="@Origin.BottomCenter"
                              Max="999"
                              Visible="@(SelectedEntries.Count > 0)">
                        <MudIconButton
                            Icon="@Icons.Material.Filled.PlaylistAdd"
                            Color="@Color.Info"
                            OnClick="@AssignListToSelectedAsync"
                            Disabled="@(SelectedEntries.Count == 0)"/>
                    </MudBadge>
                </MudTooltip>
                <MudTooltip Text="Bulk transfer"
                            Placement="@Placement.Top">
                    <MudBadge Content="@SelectedEntries.Count"
                              Color="@Color.Info"
                              Origin="@Origin.BottomCenter"
                              Max="999"
                              Visible="@(SelectedEntries.Count > 0)">
                        <MudIconButton
                            Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft"
                            Color="@Color.Info"
                            OnClick="@TransferSelectedAsync"
                            Disabled="@(SelectedEntries.Count == 0)"/>
                    </MudBadge>
                </MudTooltip>
                <MudTooltip Text="Bulk remove"
                            Placement="@Placement.Top">
                    <MudBadge Content="@SelectedEntries.Count"
                              Color="@Color.Error"
                              Origin="@Origin.BottomCenter"
                              Max="999"
                              Visible="@(SelectedEntries.Count > 0)">
                        <MudIconButton
                            Icon="@Icons.Material.Filled.DeleteForever"
                            Color="@Color.Error"
                            OnClick="@DeleteSelectedForeverAsync"
                            Disabled="@(SelectedEntries.Count == 0)"/>
                    </MudBadge>
                </MudTooltip>
            </MudStack>
        </MudItem>
    }
</MudGrid>

@code
{

    [Parameter]
    public Context CurrentContext { get; set; } = new();

    [Parameter]
    public EventCallback<Context> CurrentContextChanged { get; set; }

    [Parameter]
    public HashSet<InventoryEntryBase> SelectedEntries { get; set; } = [];

    [Parameter]
    public IEnumerable<IGameLocation> FilteredLocations { get; set; } = [];

    [Parameter]
    public EventCallback OnChange { get; set; }

    [Parameter]
    public bool WithoutText { get; set; }

    [Parameter]
    public bool WithoutLocation { get; set; }

    [Parameter]
    public bool WithoutList { get; set; }

    [Parameter]
    public bool WithoutBulkOperations { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ViewModel.OnChange += PropagateChange;
    }

    public void Dispose()
        => ViewModel.OnChange -= PropagateChange;

    private void PropagateChange(object? _, EventArgs e)
        => InvokeAsync(() => OnChange.InvokeAsync());

    private async Task UpdateFilters()
        => await CurrentContextChanged.InvokeAsync(CurrentContext);

    private async Task TransferSelectedAsync()
        => await ViewModel.TransferAsync(SelectedEntries, CurrentContext);

    private async Task AssignListToSelectedAsync()
        => await ViewModel.AssignToListAsync(SelectedEntries, CurrentContext);

    private async Task DeleteSelectedForeverAsync()
        => await ViewModel.DeleteForeverAsync(SelectedEntries);

    public class Context
    {
        public string? Text;
        public IGameEntity? LocationEntity;
        public InventoryEntryList? InventoryList;

        public IGameLocation? Location
            => LocationEntity as IGameLocation;

        public bool HasActiveFilters
            => this is { Text: not null } or { Location: not null } or { InventoryList: not null };

        public IEnumerable<InventoryEntryBase> Filter(IEnumerable<InventoryEntryBase> entries)
            => entries
                .Where(x => Text is null || x.Entity.Name.MainContent.FullName.Contains(Text, StringComparison.OrdinalIgnoreCase))
                .Where(x => Location is null || (x is IGameLocatedAt locatedAt && Location.IsOrContains(locatedAt.Location)))
                .Where(x => InventoryList is null || x.List?.Id == InventoryList.Id);
    }

}
